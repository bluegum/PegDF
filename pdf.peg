#Copyright (C) 2011 by Dakai Liu
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in
#all copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#THE SOFTWARE.
#
#pdf_peg_grammar
#

####################################
#Productions
####################################
start	<- MAGIC COMMENT* EOL* SPACE* OBJ+ DELIM (XREF DELIM TRAILER)+ STARTXREF GOBBLE {print_stack();}
DICT	<- DB (DELIM KEY DELIM(VALUE / KWORD / ID))* DE DELIM
DB      <- '<<' DELIM {push_marker(eDictMarker);}
DE	<- '>>' DELIM {pop_dict();}
KEY	<- '/' < ALPHANUM+ >  DELIM {push_key(yytext);} 
VALUE	<- (
	   REF
	   / REAL
	   / NUM  {pop();}
	   / KEY
	   / DICT
	   / ARRAY
	   / STRING
	   / HEXSTR
	   / KWORD
	   ) DELIM 
ARRAY	   <- '[' { push_marker(eArrayMarker); }
	   DELIM (VALUE)* ']' DELIM { push_array();  }

STRING     <- STRBGN {push_marker(eString);}
	      STR* STREND DELIM 
#string temporary rule
STR	   <- (
	      STRE  STR 
	      /STRE
	      )
#string element
STRE       <- (
	      <STRA+>   STR
  	      / <STRA+> 
	      / '(' STRE  ')'
	      / '(' ')'
     	      )
#string alphabet
STRA       <- (ESCPAREN / (!STRBGN !STREND .))

HEXSTR	   <- '<' [0-9a-fA-F\n\r]* '>' DELIM

OBJ	<- NUM  NUM   'obj' DELIM   { push_marker(eObjMarker); printf("objbegin..\n"); }
	(REF 
	/ DICT 
	/ NUM {pop();}
	/ ARRAY
	/ KEY
	/ STRING
	)* DELIM
	STREAM*
	'endobj'  {pop_obj();} GARBAGE* DELIM 

STREAM   <- 'stream'EOL* (!'endstream' .)* 'endstream' DELIM {printf("stream...\n");}

REF	 <- NUM NUM 'R' DELIM { push_ref(eRef, pop().value.i, pop().value.i);}
XREF	 <- 'xref' DELIM {printf("xref...%s", yytext); }
	 POSITIVE 
	 POSITIVE {xref_new(atoi(yytext));}
	 DELIM
	 XREFTAB*  
XREFTAB	 <- NUM NUM XREF_ENTRY_FLAG 
	 DELIM {xref_add(pop().value.i, pop().value.i, pop().value.i);}
	 
TRAILER	        <- 'trailer' DELIM DICT DELIM {printf(" trailer...\n");}
STARTXREF      	<- 'startxref' DELIM NUM DELIM {printf("startxref...%d\n", pop().value.i);}

GARBAGE		<- . !('xref'/ 
		      	NUM NUM 'obj'
			) 
#####################################
#Terminals
#####################################
GOBBLE	       	<- .*
POSITIVE       	<- < [0-9]+ > SPACE*
NUM	       	<- < [-]?[0-9]+ > DELIM {push(eInt,atoi(yytext));}
REAL	       	<- < [-]?[0-9.]+ > DELIM {push(eReal,atof(yytext));}
ALPHANUM       	<- [a-zA-Z0-9#+_,.:\-]
MAGIC		<- '%'+[pP][dD][fF] (!EOL .)* EOL {printf("start PDF...\n");}
COMMENT		<-'%'+ (!EOL .)* EOL
SPACE		<- [ \t]
EOL		<- '\n' / '\r\n' / '\r'
DELIM		<- (SPACE / EOL)*
STRBGN		<- '('
STREND		<- ')'
ESCPAREN	<- (
	      	   '\\' '('
		   / '\\' ')'
	      	   )
XREF_ENTRY_FLAG <- 'n' {push(eInt, 'n');}
		   /'f' {push(eInt, 'f');}
KWORD		<- ( 'false' {push(eBool, 0);}
		/ 'true'  { push (eBool, 1); }
		/ 'null') DELIM
ID		<- (!SPACE !EOL .)* DELIM