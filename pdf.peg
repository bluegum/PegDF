#Copyright (C) 2011 by Dakai Liu
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in
#all copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#THE SOFTWARE.

#
#                             pdf_peg_grammar
#

####################################
# Productions
####################################
start	<- COMMENT EOL* SPACE* 
	   / OBJ
	   / DELIM (XREF TRAILER)* STARTXREF GOBBLE {print_stack();}
DICT	<- DB 
	( KEY COMMENT* (VALUE / KWORD / ID)
	/ COMMENT  
	)* DE 
DB      <- '<<' DELIM {push_marker(eDictMarker);}
DE	<- '>>' DELIM {pop_dict();}
KEY	<- DELIM '/' < ALPHANUM+ > DELIM  {push_key(yytext);} 
VALUE	<- (
	   REF
	   / NUM
	   / REAL
	   / KEY
	   / DICT
	   / ARRAY
	   / STRING
	   / HEXSTR
	   / KWORD
	   ) DELIM 
ARRAY	   <- '[' DELIM { push_marker(eArrayMarker); }
	      (VALUE)* 
	      ']'  DELIM { push_array();  }
	   
STRING     <- STRBGN {push_literal(NULL);}
	      STR* STREND  {print_literal();}
#string temporary rule
STR	   <- (
	      STRE  STR 
	      /STRE
	      )
#string element
STRE       <- (
	       <STRA+>  {push_literal(yytext);} STR 
  	      / <STRA+> {push_literal(yytext);}
	      / '(' {push_literal("(");} STRE  ')' {push_literal(")");}
	      / '(' ')' {push_literal("()");}
     	      )
#string alphabet
STRA       <- (ESCPAREN / (!STRBGN !STREND .))

HEXSTR	   <- '<' < [0-9a-fA-F\n\r]* > '>' DELIM {push_hexliteral(yytext);}

OBJ	<- NUM  NUM  'obj' DELIM   { push_marker(eObjMarker); }
	COMMENT*
	(REF 
	/ DICT 
	/ NUM
	/ REAL
	/ ARRAY
	/ KEY
	/ STRING
	/ HEXSTR
	)* DELIM
	STREAM*
	'endobj'  {pop_obj();} GARBAGE* DELIM 

STREAM   <- 'stream' EOL* {pop_stream( yyoff+pdf_parser_inst.file_position);}
	 (!'endstream' .)* 'endstream' DELIM 

REF	 <- NUM NUM 'R' DELIM { push_ref(eRef, pop().value.i, pop().value.i);}
XREF	 <- 'xref' DELIM {printf("xref...%s", yytext); }
	 (
	 POSITIVE {push(eInt,atoi(yytext));}
	 POSITIVE {xref_new(pop().value.i, atoi(yytext));}
	 DELIM
	 XREFTAB*  DELIM
	 )+
XREFTAB	 <- < [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] > {push(eInt,atoi(yytext));}
	    ' ' 
	    < [0-9][0-9][0-9][0-9][0-9] > {push(eInt,atoi(yytext));}
	    ' '
	    XREF_ENTRY_FLAG 
	    (SP CR/SP LF/CR LF) {xref_append(pop(), pop().value.i, pop().value.i);}
	 
TRAILER	        <- 'trailer' DELIM DICT DELIM {printf(" trailer...\n"); read_trailer();}
STARTXREF      	<- DELIM 'startxref' DELIM NUM DELIM {xref_start();}

GARBAGE		<- . !('startxref' / 'xref'/ 
		      	NUM NUM 'obj'
			) 
#####################################
# Terminals
#####################################
GOBBLE	       	<- .*
POSITIVE       	<- < [0-9]+ > SPACE*
NUM	       	<- < [-+]?[0-9]+ !['.'] > DELIM {push(eInt,atoi(yytext));}
REAL	       	<- < [-+]?[0-9]* '.' [0-9]+ > DELIM {push(eReal,atof(yytext));}
ALPHANUM       	<- [a-zA-Z0-9#+_,.:~\-]
COMMENT		<- < '%'+ (!EOL .)* EOL DELIM > {pop_comment(yytext, yytextlen);}
SPACE		<- ' ' / '\t' / EOL
EOL		<- '\r\n' / '\r' / '\n'
DELIM		<- (SPACE / EOL)*
STRBGN		<- '('
STREND		<- ')' DELIM
ESCPAREN	<- (
	      	   '\\' '('
		   / '\\' ')'
		   / '\\\\'
	      	   )
XREF_ENTRY_FLAG <- (
		   < 'n' >
		   / < 'f' >
		   ) {push(eInt, yytext[0]);}
KWORD		<- ( 'false' {push(eBool, 0);}
		/ 'true'  { push (eBool, 1); }
		/ 'null') DELIM
ID		<- (!SPACE !EOL .)* DELIM

#OCT		<- '\\' [0-2] [0-7] [0-7]
#		   / '\\' [0-7] [0-7]

#ESC		<- '\\' [nrtbf\\]
SP		<- ' '
CR		<- '\r'
LF		<- '\n'
