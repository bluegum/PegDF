An experimental PEG grammar pdf parser

PEG(Parser Expression Grammar) provided a succinct and expressive way
for parsing tasks. The fact of not needing a lexer definition alone, makes
me want to put a simple DSL to test, and PDF specification seems a pretty
good fit.

PDF file structure syntax is considered a set rather elementary 
syntasis, mostly involving data container constructs parsing, eg.
object parsing, map parsing, map entry pairing, and so on. However some
syntax has its own quirks, eg, nested literal string and stream object.
For a nested string, a PEG grammar can be constructed, however, it is more
complex than it should be. For stream object, a semantic hook is used
skip the stream data, whenever is possible.

In these experiment, PEG grammar proved to be very expressive for PDF constructs.
However, the grammar in this project does not cover the whole PDF stream, due
to the nature of LL(k) of PEG, and to avoid excessive AST. So each grammar
only covers individual language constructs, and the document correctness is
enforced by semantic handlers.

Some observations on PDF specificatin, and this PEG grammar on that, even the
current grammar specifies PDF nested string construct, However, by using more 
comprehensive semantic handler may better handle a string AST.

This project is writting in the original PEG syntax.
peg/leg parser/generater is required to build PegDF.

The other purpose of this object, is to prove that the "xref" is not essential 
in interpreting a PDF stream. So far, this is proved to be correct.

Steps to build:
1. download peg/leg source code.
2. "cd peg-0.1.4"
3. "make; make install"
4. "cd PegDF"
5. make
6. ./readpdf -o outfile infile

To make a debug build:
you@machin:export DEBUG=y
This will print out all the internal node id's and command digests.

TODO:
	formalize API for semantic functions
